version: '3.8'

services:
  # ===== BANCO DE DADOS =====
  mysql-db:
    image: mysql:8.0
    container_name: ecommerce-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: ecommerce_db
      MYSQL_USER: appuser
      MYSQL_PASSWORD: apppass
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # ===== ZOOKEEPER =====
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: ecommerce-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ecommerce-network

  # ===== KAFKA =====
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: ecommerce-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      timeout: 20s
      retries: 10

  # ===== REDIS =====
  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 20s
      retries: 10

  # ===== USER MANAGEMENT SERVICE =====
  user-service:
    build:
      context: ./user-management/infrastructure
      dockerfile: Dockerfile
    container_name: user-service
    restart: on-failure
    ports:
      - "8081:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MYSQL_HOST: mysql-db
      MYSQL_PORT: 3306
      MYSQL_DATABASE: ecommerce_db
      MYSQL_USER: root
      MYSQL_PASSWORD: rootpass
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_GROUP_ID: user-service-group
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      mysql-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce-network

  # ===== ORDER MANAGEMENT SERVICE =====
  order-service:
    build:
      context: ./order-management/infrastructure
      dockerfile: Dockerfile
    container_name: order-service
    restart: on-failure
    ports:
      - "8082:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MYSQL_HOST: mysql-db
      MYSQL_PORT: 3306
      MYSQL_DATABASE: ecommerce_db
      MYSQL_USER: root
      MYSQL_PASSWORD: rootpass
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_GROUP_ID: order-service-group
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      mysql-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce-network

  # ===== PRODUCT CATALOG SERVICE =====
  product-service:
    build:
      context: ./product-catalog/infrastructure
      dockerfile: Dockerfile
    container_name: product-service
    restart: on-failure
    ports:
      - "8083:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MYSQL_HOST: mysql-db
      MYSQL_PORT: 3306
      MYSQL_DATABASE: ecommerce_db
      MYSQL_USER: root
      MYSQL_PASSWORD: rootpass
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_GROUP_ID: product-service-group
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      mysql-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce-network

  # ===== PAYMENT PROCESSING SERVICE =====
  payment-service:
    build:
      context: ./payment-processing/infrastructure
      dockerfile: Dockerfile
    container_name: payment-service
    restart: on-failure
    ports:
      - "8084:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MYSQL_HOST: mysql-db
      MYSQL_PORT: 3306
      MYSQL_DATABASE: ecommerce_db
      MYSQL_USER: root
      MYSQL_PASSWORD: rootpass
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_GROUP_ID: payment-service-group
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      mysql-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecommerce-network

volumes:
  mysql_data:

networks:
  ecommerce-network:
    driver: bridge
